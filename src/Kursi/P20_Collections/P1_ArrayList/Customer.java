package Kursi.P20_Collections.P1_ArrayList;

/* Международный интернет-магазин ювелирных украшений LuxArrays принимает оплату как наличными, так и безналичным платежом. Согласно законодательству, при продаже ювелирных изделий на сумму более 500$ продавец обязан сохранять
сведения об идентификации покупателя. В случае наличной оплаты необходимо сохранять сведения о номере паспорта, в случае безналичных платежей – номер карты.
Поскольку товары LuxArrays являются товарами для премиум-сегмента, коттийский филиал LuxArrays обязан сохранять сведения обо всех покупателях. Кроме того, магазин предоставляет скидки постоянным покупателям в размере 5, 10 и 20% в зависимости от количества совершенных в магазине покупок.

+ Реализуйте классы Customer, CashCustomer и CardCustomer, удовлетворяющие следующим условиям.
1.	Классы должны обладать доступным для чтения и записи полем purchaseCount (счетчик покупок),
отражающим количество покупок клиента, значение которого должно быть положительным или нулем.

2.	Классы должны обладать доступным для чтения полем discountSize, отражающим размер скидки,
которая может принимать значения только 0, 5, 10 и 20% (0, 0.05, 0.1, 0.2).

3.	Классы должны обладать доступным только для чтения полем name – именем клиента,
которое обязано быть заполнено или содержать значение по умолчанию – «No-name».

4.	Классы должны автоматически вычислять значение скидки клиента при изменении значения поля purchaseCount
в соответствии со следующими правилами:
a.	клиенты, количество покупок которых меньше 0-4, не владеют скидкой;
b.	клиенты, количество покупок которых больше 5-9, владеют скидкой в 5%;
c.	клиенты, количество покупок которых больше 10-14, владеют скидкой в 10%;
d.	все остальные клиенты - больше 15 - владеют скидкой в 20%.

5.	Классы должны предоставлять общедоступный метод customerInfo.

6.	Класс CashCustomer дополнительно должен обладать доступным только для чтения полем documentNumber,
отражающим значение номера паспорта в строковом виде (значение по умолчанию «0000 000000»).

+ 7.	Класс CashCustomer дополнительно должен предоставлять общедоступный конструктор, принимающий три параметра
(имя клиента, номер паспорта, количество покупок).

8.	Метод customerInfo класса CashCustomer должен выводить на экран сведения о клиенте в формате:
«Customer < name > (passport: < documentNumber >) has a discount < discount > % < nl >», где:
a.	< name >, < discount > и documentNumber - значения соответствующих полей;
b.	< nl > – символ перевода на новую строку, который принят в операционной системе TechArrays
(должен определяться системными настройками).

9.	Класс CardCustomer должен обладать доступным только для чтения полем cardNumber, содержащим номер банковской карты клиента,
значение которого должно удовлетворять следующим условиям: a. состоит из 16 цифр;     b. значение по умолчанию: 16 нулей.

10.	Класс CardCustomer дополнительно должен предоставлять общедоступный конструктор, принимающий три параметра
(имя клиента, номер карты, количество покупок).

11.	Метод customerInfo класса CardCustomer должен выводить на экран сведения о клиенте в формате:
«Customer < name > (card: < cardNumber >) has a discount < discount > % < nl >», где:
a.	< name >, < discount > и < cardNumber > – значения соответствующих полей;
b.	< nl > – символ перевода на новую строку, который принят в операционной системе TechArrays (должен определяться системными настройками).


Реализуйте класс Shop, удовлетворяющий следующим условиям.
1.	Класс должен обладать недоступным для чтения и записи полем shopCustomers, которое будет содержать в себе информацию обо всех клиентах магазина.

2.	Класс должен предоставлять общедоступный метод printShopSummary,
который выводит на экран сведения обо всех клиентах магазина (в соответствии с заявленным для каждого типа клиента форматом).

3.	Класс должен предоставлять public static void createShopInfo,
который считывает данные обо всех клиентах магазина из консоли и удовлетворяет следующим требованиям:
a.	ввод в консоль будет производиться в автоматическом режиме, поэтому метод должен считать все введенные данные верными;
b.	перед началом ввода в консоль метод должен вывести приглашение в формате: «Shop data:»;
c.	ввод данных о каждом клиенте осуществляется с новой строки, используя следующий формат:
«< type >,< name >,< purchaseCount >,< documentNumber >,< cardNumber >»,
где < type > – это тип клиента (1 – клиент класса CashCustomer, 2 – клиент класса CardCustomer),
а вместо блоков, указанных в угловых скобках, содержатся значения, которые должны присваиваться соответствующим полям классов;
d.	ввод заканчивается строкой, состоящей из одного значения «exit»;
e.	даже если данные о номере документа или номере карты отсутствуют, во входных данных не пропускается позиция,
например: «2,Oliver Smith,5,,1234567890987654» или «1,John Olver,18,5970 156723,»;
f.	если пользователь ввел недостаточно данных для создания клиента выбранного типа,
неопределенные значения должны инициализироваться значениями по умолчанию;
g.	все лишние данные не должны учитываться при создании клиента;
h.	Метод должен возвращать объект класса Shop с заполненными сведениями о клиентах.

В качестве ответа приложите исходные коды классов Customer, CashCustomer, CardCustomer, Shop, а также, при необходимости,
исходные коды других классов.
Примечание: Начиная с текущего задания, в описании в редких случаях будут указываться типы данных,
модификаторы доступа для переменных и правила наследования. Вы должны самостоятельно выбрать наиболее эффективные для решения
поставленных задач типы данных и правила доступа к полям и методам классов, а также способы организации кода.
Автоматизированные тесты будут учитывать эффективность выбранных решений, и, если они окажутся не эффективными,
задание будет возвращено на доработку. */


// задание не успел выполнить, последний ответ от препода:
// - createShopInfo должен возвращать просто Shop


abstract class Customer {  // класс от которого наследуются классы CardCustomer и CashCustomer
    int purchaseCount = 0;  // счетчик покупок
    int discountSize; // только 0, 5, 10 и 20% (0, 0.05, 0.1, 0.2)
    String name = "No-name";

    public void setPurchaseCount(int purchaseCount) {
        this.purchaseCount = purchaseCount;
    }

    public void setDiscountSize(int discountSize) {
        this.discountSize = discountSize;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPurchaseCount() {
        return purchaseCount;
    }

    public int getDiscountSize() {
        return discountSize;
    }

    public String getName() {
        return name;
    }

    public Customer() {
    } // конструктор по умолчанию

    public Customer(String name, int purchaseCount) {  // конструктор с параметрами
        this.name = name;
        this.purchaseCount = purchaseCount;
    }
}
